ユーザー認証後のトークン取得プロセスを完成させましょう。Device Flowの全フローを実装したコードを示します：

```typescript
interface DeviceFlowStartResponse {
  verification_uri: string;
  user_code: string;
  device_code: string;
  expires_in: number;
}

interface TokenResponse {
  access_token?: string;
  error?: string;
  error_description?: string;
}

class GitHubDeviceAuthService {
  private readonly clientId: string;
  private readonly pollingInterval = 5000;
  private deviceCode: string | null = null;

  constructor(clientId: string) {
    this.clientId = clientId;
  }

  async startDeviceFlow(): Promise<DeviceFlowStartResponse> {
    try {
      const response = await fetch('https://github.com/login/device/code', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          client_id: this.clientId,
          scope: 'repo'
        })
      });

      if (!response.ok) {
        throw new Error(`Device flow failed: ${await response.text()}`);
      }

      const data = await response.json();
      this.deviceCode = data.device_code;  // 保存して後で使用

      return {
        verification_uri: data.verification_uri,
        user_code: data.user_code,
        device_code: data.device_code,
        expires_in: data.expires_in
      };
    } catch (error) {
      console.error('Start device flow error:', error);
      throw error;
    }
  }

  async pollForToken(): Promise<string | null> {
    if (!this.deviceCode) {
      throw new Error('Device code not found. Start device flow first.');
    }

    try {
      const response = await fetch('https://github.com/login/oauth/access_token', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          client_id: this.clientId,
          device_code: this.deviceCode,
          grant_type: 'urn:ietf:params:oauth:grant-type:device_code'
        })
      });

      if (!response.ok) {
        throw new Error(`Token polling failed: ${await response.text()}`);
      }

      const data: TokenResponse = await response.json();
      console.log('Token polling response:', {
        hasAccessToken: !!data.access_token,
        error: data.error,
        errorDescription: data.error_description
      });

      if (data.error === 'authorization_pending') {
        return null;
      }

      if (data.error) {
        throw new Error(`Token error: ${data.error}`);
      }

      return data.access_token || null;
    } catch (error) {
      console.error('Poll for token error:', error);
      throw error;
    }
  }

  async waitForAuthentication(timeoutMs = 900000): Promise<string> {
    if (!this.deviceCode) {
      throw new Error('Device code not found. Start device flow first.');
    }

    const startTime = Date.now();
    let token: string | null = null;

    while (!token) {
      if (Date.now() - startTime > timeoutMs) {
        throw new Error('Authentication timeout');
      }

      console.log('Polling for token...');
      token = await this.pollForToken();

      if (!token) {
        await new Promise(resolve => setTimeout(resolve, this.pollingInterval));
      }
    }

    return token;
  }
}
```

使用例：
```typescript
async function updateFileWithDeviceFlow() {
  const auth = new GitHubDeviceAuthService('Iv23lil36t8Vv89KPoBy');
  
  try {
    // 1. Device Flow開始
    const flowResponse = await auth.startDeviceFlow();
    console.log('Authentication started:', {
      verificationUri: flowResponse.verification_uri,
      userCode: flowResponse.user_code
    });

    // 2. 認証待ち
    console.log('Waiting for user authentication...');
    const token = await auth.waitForAuthentication();
    
    // 3. 取得したトークンを使用してファイル更新
    console.log('Authentication successful, token received');
    
    return token;
  } catch (error) {
    console.error('Authentication failed:', error);
    throw error;
  }
}
```

このコードの特徴：
- デバイスコードの保持と再利用
- 詳細なエラーハンドリング
- タイムアウト処理の追加
- ポーリング状態のログ出力

これにより、認証フローの完全な実装が可能になります。